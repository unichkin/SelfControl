#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мСтруктураКэшДанных;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область Инициализация

Процедура ИнициализироватьДляЗагрузки(Источник, ГруппаРодитель = Неопределено) Экспорт

	СвойстваПлагина().Источник = Источник;

	Если ТипЗнч(Источник) = Тип("ДеревоЗначений") Тогда
		СвойстваПлагина().ТипИсточника = ТипыИсточников().Дерево;
	Иначе
		СвойстваПлагина().ТипИсточника = ТипыИсточников().ТекстXML;
	КонецЕсли;

	СвойстваПлагина().Родитель = ГруппаРодитель;
	СвойстваПлагина().Инициализирован = Истина;

КонецПроцедуры

Процедура ИнициализироватьДляВыгрузки() Экспорт
	СвойстваПлагина().ТипИсточника = ТипыИсточников().СписокВопросов;
	СвойстваПлагина().Инициализирован = Истина;

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЗагрузка

Процедура Загрузить() Экспорт

	Если СвойстваПлагина().ТипИсточника = ТипыИсточников().Дерево Тогда
		ОбъектXDTO = ОбъектXDTOПоДеревуВопросов();
	Иначе
		ОбъектXDTO = ОбъектXDTПоТекстуXML();
	КонецЕсли;

	ЗагрузитьОбъектXDTO(ОбъектXDTO);

КонецПроцедуры

Функция Выгрузить(Отбор) Экспорт
	ПроверитьИнициализацию();

	Источник = ВопросыПоПараметруИнициализации(Отбор);
	Корень = СоздатьОбъект("Вопросы");

	Для каждого Вопрос Из Источник Цикл
		ВопросXDTO = СоздатьОбъект("Вопрос");
		ЗаполнитьЗначенияСвойств(ВопросXDTO, Вопрос);

		ВопросXDTO.Ответы = СоздатьОбъект("Ответы");
		Для каждого Ответ Из Вопрос.Ответы Цикл
			ОтветXDTO = СоздатьОбъект("Ответ");
			ЗаполнитьЗначенияСвойств(ОтветXDTO, Ответ);

			ВопросXDTO.Ответы.Элементы.Добавить(ОтветXDTO);
		КонецЦикла;

		Корень.Элементы.Добавить(ВопросXDTO);
	КонецЦикла;

	Результат = СтрокаXML(Корень);

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сервис

Функция СвойстваПлагина()

	Если НЕ мСтруктураКэшДанных.Свойство("СвойстваПлагина") Тогда

		Результат = Новый Структура;
		Результат.Вставить("Инициализирован", Ложь);
		Результат.Вставить("Источник");
		Результат.Вставить("Родитель");
		Результат.Вставить("ТипИсточника");

		мСтруктураКэшДанных.Вставить("СвойстваПлагина", Результат);

	КонецЕсли;

	Возврат мСтруктураКэшДанных.СвойстваПлагина;

КонецФункции

Процедура ПроверитьИнициализацию()

	Если НЕ СвойстваПлагина().Инициализирован Тогда
		ВызватьИсключение "Плагин не инициализирован";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПрограммныеПеречисления

Функция ТипыИсточников()

	Если НЕ мСтруктураКэшДанных.Свойство("ТипыИсточников") Тогда
		ТипыИсточников = Новый Структура;
		ТипыИсточников.Вставить("Дерево", "Дерево");
		ТипыИсточников.Вставить("ТекстXML", "ТекстXML");
		ТипыИсточников.Вставить("СписокВопросов", "СписокВопросов");

		мСтруктураКэшДанных.Вставить("ТипыИсточников", ТипыИсточников);
	КонецЕсли;

	Возврат мСтруктураКэшДанных.ТипыИсточников;

КонецФункции

#КонецОбласти

#Область РаботаСXDTO

Функция ОписаниеСхемы()

	Если НЕ мСтруктураКэшДанных.Свойство("ОписаниеСхемы") Тогда
		ТекстСхемы = ЭтотОбъект.ПолучитьМакет("Схема").ПолучитьТекст();

		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстСхемы);

		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);

		ПостроительСхемXML = Новый ПостроительСхемXML;
		СхемаXML = ПостроительСхемXML.СоздатьСхемуXML(ДокументDOM);

		НаборСхемXML = Новый НаборСхемXML;
		НаборСхемXML.Добавить(СхемаXML);

		ОписаниеСхемы = Новый Структура;
		ОписаниеСхемы.Вставить("ПространствоИмен", СхемаXML.ПространствоИмен);
		ОписаниеСхемы.Вставить("Фабрика", Новый ФабрикаXDTO(НаборСхемXML));

		мСтруктураКэшДанных.Вставить("ОписаниеСхемы", ОписаниеСхемы);
	КонецЕсли;

	Возврат мСтруктураКэшДанных.ОписаниеСхемы;

КонецФункции

// Обертка для метода "Создать" объекта "ФабрикаXDTO"
//
// Параметры:
// 	ОписаниеСхемы - см. "НовоеОписаниеСхемы", "ОписаниеСхемыXSD"
//	ИмяОбъекта - Строка - имя типа, или подчиненного элемента, объект которого требуется создать
//	ОбъектXDTOРодитель - ОбъектXDTO - указывается, если необходимо создать объект для подчиненного элемента
//	 необьявленного типа
//
// Возвращаемое значение:
//	ОбъектXDTO - см. СП ФабрикаXDTO\Методы\Создать
//
Функция СоздатьОбъект(ИмяОбъекта, ОбъектXDTOРодитель = Неопределено)

	Если ОбъектXDTOРодитель = Неопределено Тогда
		ТипXDTO = ТипПоФабрике(ИмяОбъекта);
	Иначе
		ТипXDTO = ТипПоОбъекту(ОбъектXDTOРодитель, ИмяОбъекта);
	КонецЕсли;

	Возврат ОписаниеСхемы().Фабрика.Создать(ТипXDTO);

КонецФункции

// ТипXDTO для элемента необьявленного типа, получаемый из свойств объекта владельца
//
// Параметры:
// 	ОбъектXDTO - ОбъектXDTO - владелец элемента
//  ИмяЭлемента - Строка - имя подчиненного элемента, тип которого требуется получить
//
// Возвращаемое значение:
//	ТипXDTO
//
Функция ТипПоОбъекту(ОбъектXDTO, ИмяЭлемента)
	Возврат ОбъектXDTO.Тип().Свойства.Получить(ИмяЭлемента).Тип;

КонецФункции

// Обертка для метода "Тип" объекта "ФабрикаXDTO"
//
// Параметры:
// 	ОписаниеСхемы - см. "НовоеОписаниеСхемы", "ОписаниеСхемыXSD"
//	ИмяТипа - Строка - если не указано, используется свойство корневого пакета, которое должно быть единственным.
//	Если корневых свойств пакета несколько, при не указании имени типа будет выброс исключения.
//
// Возвращаемое значение:
//	ТипXDTO  - см. СП ФабрикаXDTO\Методы\Тип
//
Функция ТипПоФабрике(ИмяТипа)
	ОписаниеСхемы = ОписаниеСхемы();
	Возврат ОписаниеСхемы.Фабрика.Тип(ОписаниеСхемы.ПространствоИмен, ИмяТипа);

КонецФункции

Функция НеобязательныеПараметрыЗаписиXML()

	Результат = Новый Структура;
	Результат.Вставить("ЛокальноеИмя", Неопределено);
	Результат.Вставить("URIПространстваИмен", ОписаниеСхемы().ПространствоИмен);
	Результат.Вставить("Форма", ФормаXML.Элемент);
	Результат.Вставить("УказаниеТипа", НазначениеТипаXML.Неявное);

	Возврат Результат;

КонецФункции

Функция СтрокаXML(ОбъектXDTO, НеобязательныеПараметры = Неопределено)

	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьОбъявлениеXML();

	Если НеобязательныеПараметры = Неопределено Тогда
		НеобязательныеПараметры = НеобязательныеПараметрыЗаписиXML();

	КонецЕсли;

	ОписаниеСхемы().Фабрика.ЗаписатьXML(Запись
		, ОбъектXDTO
		, НеобязательныеПараметры.ЛокальноеИмя
		, НеобязательныеПараметры.URIПространстваИмен
		, НеобязательныеПараметры.Форма
		, НеобязательныеПараметры.УказаниеТипа);

	СтрокаXML = Запись.Закрыть();

	Возврат СтрокаXML;

КонецФункции

#КонецОбласти

#Область ЗагрузкаТестов

Функция ОбъектXDTOПоДеревуВопросов()

	Результат = СоздатьОбъект("Вопросы");

	Для каждого УзелВопроса Из СвойстваПлагина().Источник.Строки Цикл
		Вопрос = СоздатьОбъект("Вопрос");
		ЗаполнитьЗначенияСвойств(Вопрос, УзелВопроса);
		Вопрос.ТекстВопроса = УзелВопроса.Текст;
		Вопрос.Ответы = СоздатьОбъект("Ответы");

		Для каждого УзелОтвета Из УзелВопроса.Строки Цикл
			Ответ = СоздатьОбъект("Ответ");
			ЗаполнитьЗначенияСвойств(Ответ, УзелОтвета);
			Ответ.ТекстОтвета = УзелОтвета.Текст;

			Вопрос.Ответы.Элементы.Добавить(Ответ);
		КонецЦикла;

		Результат.Элементы.Добавить(Вопрос);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ОбъектXDTПоТекстуXML()
	ВызватьИсключение "Не реализовано";
КонецФункции

Процедура ЗагрузитьОбъектXDTO(ОбъектXDTO)

	Для каждого Вопрос Из ОбъектXDTO.Элементы Цикл
		ЗагрузитьВопрос(Вопрос);
	КонецЦикла;

	Всего = ОбъектXDTO.Элементы.Количество();
	Сообщить("Загружено " + Всего + " вопросов.");

КонецПроцедуры

ПРоцедура ЗагрузитьВопрос(Вопрос)

	Родитель = СвойстваПлагина().Родитель;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Вопросы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Вопросы КАК Вопросы
		|ГДЕ
		|	Вопросы.ТекстВопроса = &ТекстВопроса
		|	И Вопросы.Ссылка В ИЕРАРХИИ(&Родитель)";

	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("ТекстВопроса", Вопрос.ТекстВопроса);

	РезультатЗапроса = Запрос.Выполнить();
	ВопросНайден = НЕ РезультатЗапроса.Пустой();
	Если ВопросНайден Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		ОбъектВопроса = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектВопроса.Ответы.Очистить();
	Иначе
		ОбъектВопроса = Справочники.Вопросы.СоздатьЭлемент();
	КонецЕсли;

	ОбъектВопроса.Родитель = Родитель;
	ЗаполнитьЗначенияСвойств(ОбъектВопроса, Вопрос);

	Для каждого Ответ Из Вопрос.Ответы.Элементы Цикл
		СтрокаТЧ = ОбъектВопроса.Ответы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Ответ);
	КонецЦикла;

	ОбъектВопроса.Записать();

КонецПроцедуры

#КонецОбласти

#Область Выгрузка

Функция ВопросыПоПараметруИнициализации(Отбор)
	Перем Результат;

	ТипОтбора = ТипЗнч(ОТбор);

	Если ТипОтбора = Тип("СправочникСсылка.ОтборыВопросов") Тогда
		Результат = Справочники.ОтборыВопросов.СписокВопросовОтбора(Отбор);

	ИначеЕсли ТипОтбора = Тип("Массив") Тогда
		Результат = Отбор;

	ИначеЕсли ТипОтбора = Тип("СправочникСсылка.Вопросы") Тогда
		Результат = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор);

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Новый Массив;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

мСтруктураКэшДанных = Новый Структура;

#КонецОбласти

#КонецЕсли
