
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("ГруппаПриемник", ГруппаПриемник);
	УстановитьВидимостьГруппыПроверкиОрфографии(ЭтотОбъект, Ложь);

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)

	Если ЗначениеЗаполнено(ГруппаПриемник) Тогда
		Настройки.Удалить("ГруппаПриемник");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресИточникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Текстовый файлы (*.txt)|*.txt";
	Если Диалог.Выбрать() Тогда
		АдресИточника = Диалог.ВыбранныеФайлы[0];
		ОбновитьТекстИсточника();
		ПреобразоватьТекстВДеревоНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьТекст(Команда)
	ОбновитьТекстИсточника();
КонецПроцедуры

&НаКлиенте
Процедура АдресИточникаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Файл = Новый Файл(АдресИточника);
	Если Файл.Существует() Тогда
		ЗапуститьПриложение(Файл.Путь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаПриемникОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ГруппаПриемник);
	ОткрытьФорму("Справочник.Вопросы.ФормаСписка", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура УникальныеСловаПроверкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИсходныйСловарь = НастройкиПрограммыКлиентСервер.СловаИсключенияПриПроверкеОрфографии();
	ЗначениеКСохранению = ИсходныйСловарь + Символы.ПС + УникальныеСловаПроверки;
	ОбщегоНазначенияВызовСервера.ЗаписатьКонстанту("СловаИсключенияПриПроверкеОрфографии"
		, ЗначениеКСохранению
		, Истина
		, Истина);

	ПроверитьОрфографиюНаКлиенте();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоВопросов

&НаКлиенте
Процедура ДеревоВопросовПриАктивизацииСтроки(Элемент)

	Ид = Элемент.ТекущаяСтрока;
	Если Ид = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ИдДеревоВопросов = Ид Тогда
		Возврат;
	КонецЕсли;
	ИдДеревоВопросов = Ид;

	ТекДанные = Элемент.ТекущиеДанные;
	Узлы = ТекДанные.ПолучитьЭлементы();
	ЭтоРодитель = ЗначениеЗаполнено(Узлы);
	Если ЭтоРодитель Тогда
		Родитель = ТекДанные;
		УзлыРодителя = Узлы;
	Иначе
		Родитель = ТекДанные.ПолучитьРодителя();
		УзлыРодителя = Родитель.ПолучитьЭлементы();
	КонецЕсли;
	ТекстОтветаСВопросами = ТекстОтветасВопросамиУзла(Родитель, УзлыРодителя);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПреобразоватьТекстВДерево(Команда)
	ПреобразоватьТекстВДеревоНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьДеревоВТекст(Команда)
	ПреобразоватьДеревоВТекстНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)

	Если НЕ ЗначениеЗаполнено(ГруппаПриемник) Тогда
		ПоказатьПредупреждение(,"Не указана группа приемник");
		Возврат;
	КонецЕсли;

	Если ВВыбраннойГруппеЕстьЭлементы() Тогда
		Если Вопрос("Выбранная группа не пуста. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЗагрузитьНаСервере();
	ОповеститьОбИзменении(Тип("СправочникСсылка.Вопросы" ));
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрфографию(Команда)
	ПроверитьОрфографиюНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	Узлы = Объект.ДеревоВопросов.ПолучитьЭлементы();
	Для каждого Узел Из Узлы Цикл
		Элементы.ДеревоВопросов.Свернуть(Узел.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	Узлы = Объект.ДеревоВопросов.ПолучитьЭлементы();
	Для каждого Узел Из Узлы Цикл
		Элементы.ДеревоВопросов.Развернуть(Узел.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДеревоВопросов(Команда)
	ПроверитьДеревоВопросовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьТекстИсточника(Команда)
	Если Вопрос("Записать текст в источник?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(Объект.ТекстИсточник);
	ТекстДок.Записать(АдресИточника, "UTF8");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДеревоВТекст

&НаКлиенте
Процедура ПреобразоватьТекстВДеревоНаКлиенте()
	Если Вопрос("Выполнить преобразование текста?", РежимДиалогаВопрос.ДаНет) =
			КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ПреобразоватьТекстВДеревоНаСервере();
	ПроверитьОрфографиюНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьТекстВДеревоНаСервере()
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	ОбъектФормы.ПреобразоватьТекстВДерево();
	ЗначениеВРеквизитФормы(ОбъектФормы, "Объект");

	КоличествоВопросовДерева = ОбъектФормы.ДеревоВопросов.Строки.Количество();
	УстановитьВидимостьГруппыПроверкиОрфографии(ЭтотОбъект, Ложь);
КонецПроцедуры

#КонецОбласти

#Область ТекстВДерево

&НаКлиенте
Функция ТекстОтветасВопросамиУзла(УзелРодителя, УзлыРодителя)

	Результат = УзелРодителя.Номер + Символы.Таб + УзелРодителя.Текст;
	Для каждого Узел Из УзлыРодителя Цикл
		Для сч=1 По СтрЧислоСтрок(Узел.Текст) Цикл
			стр = СтрПолучитьСтроку(Узел.Текст, сч);
			Результат = Результат +
			 Символы.ПС + ?(сч=1, Узел.Номер, "") +
			 Символы.Таб + стр;
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПреобразоватьДеревоВТекстНаСервере()

	Объект.ТекстИсточник = "";
	КорневыеУзлы = Объект.ДеревоВопросов.ПолучитьЭлементы();
	Для каждого УзелРодителя Из КорневыеУзлы Цикл
		ТекстОтветасВопросамиУзла = ТекстОтветасВопросамиУзла(УзелРодителя
			, УзелРодителя.ПолучитьЭлементы());

		Разделитель = ?(ЗначениеЗаполнено(Объект.ТекстИсточник), Символы.ПС + Символы.ПС, "");
		Объект.ТекстИсточник = Объект.ТекстИсточник + Разделитель + ТекстОтветасВопросамиУзла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаОрфографии

&НаКлиенте
Процедура ПроверитьОрфографиюНаКлиенте()

	Если Вопрос("Выполнить орфографическую проверку?", РежимДиалогаВопрос.ДаНет) =
			КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	КорневыеУзлы = Объект.ДеревоВопросов.ПолучитьЭлементы();
	Всего = КорневыеУзлы.Количество();

	УникальныеСлова = Новый Соответствие;
	Счетчик = 0;
	Для каждого Узел Из КорневыеУзлы Цикл
		ПроверитьОрфографиюНаСервере(Узел.ПолучитьИдентификатор(), УникальныеСлова);

		Счетчик = Счетчик + 1;
		ПрогрессПроверкиОрфографии = (Счетчик / Всего) * 100;
	КонецЦикла;

	ЕстьОшибки = ЗначениеЗаполнено(УникальныеСлова);
	УстановитьВидимостьГруппыПроверкиОрфографии(ЭтотОбъект, ЕстьОшибки);
	СписокУникальных = ОбщегоНазначенияКлиентСервер.ЗначенияКолонкиКоллекции(УникальныеСлова, "Ключ");
	УникальныеСловаПроверки = СтрСоединить(СписокУникальных, Символы.ПС);

КонецПроцедуры

&НаСервере
Процедура ПроверитьОрфографиюНаСервере(ИдУзла, УникальныеСлова)

	Узел = Объект.ДеревоВопросов.НайтиПоИдентификатору(ИдУзла);
	РезультатПроверки = ПроверкаОрфографииВызовСервера.ПроверкаОрфографии(Узел.Текст);
	Узел.ПроверкаОрфографии = РезультатПроверки.Текст;

	Для каждого Слово Из РезультатПроверки.ОшибочныеСлова Цикл
		УникальныеСлова.Вставить(ВРег(Слово));
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Диалог

#Область НастройкаФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьГруппыПроверкиОрфографии(Форма, Флаг)
	Форма.Элементы.ГруппаПроверкаОрфографии.Видимость = Флаг;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Условия

&НаСервере
Функция ВВыбраннойГруппеЕстьЭлементы()

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Вопросы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Вопросы КАК Вопросы
		|ГДЕ
		|	Вопросы.Ссылка В ИЕРАРХИИ(&ГруппаПриемник)
		|	И Вопросы.ЭтоГруппа = ЛОЖЬ";

	Запрос.УстановитьПараметр("ГруппаПриемник", ГруппаПриемник);

	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

#КонецОбласти

#Область Загрузка

&НаКлиенте
Процедура ОбновитьТекстИсточника()
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(АдресИточника, "UTF8");
	Объект.ТекстИсточник = ТекстДок.ПолучитьТекст();

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере()
	ДеревоВопросов = РеквизитФормыВЗначение("Объект.ДеревоВопросов");

	Плагин = Обработки.Плагин_ЗагрузкаВыгрузка.Создать();
	Плагин.ИнициализироватьДляЗагрузки(ДеревоВопросов, ГруппаПриемник);
	Плагин.Загрузить();
КонецПроцедуры

#КонецОбласти

#Область ПроверкаДерева

&НаСервере
Процедура ПроверитьДеревоВопросовНаСервере()

	ПроверкаДерева = "";

	ДеревоВопросов = РеквизитФормыВЗначение("Объект.ДеревоВопросов");
	Если НЕ ЗначениеЗаполнено(ДеревоВопросов.Строки) Тогда
		Возврат;
	КонецЕсли;
	КоличествоВопросовДерева = ДеревоВопросов.Строки.Количество();

	ПроверитьУникальностьТекстов(ДеревоВопросов);

	ТаблицаТекстов = Новый ТаблицаЗначений;
	ТаблицаТекстов.Колонки.Добавить("Текст", ОписаниеТипа("Строка", 1000));
	ТаблицаТекстов.Колонки.Добавить("Номер", ОписаниеТипа("Строка", 10));
	Для каждого УзелВопроса Из ДеревоВопросов.Строки Цикл
		СтрокаТаблицы = ТаблицаТекстов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, УзелВопроса);
	КонецЦикла;

	ПроверитьНаличиеВопросовВСправочнике(ТаблицаТекстов);
	ПроверитьПорядокНумерации(ТаблицаТекстов);
КонецПроцедуры

Процедура ПроверитьУникальностьТекстов(ДеревоВопросов)
	ТекстыВопросов = ОбщегоНазначенияКлиентСервер.ЗначенияКолонкиКоллекции(ДеревоВопросов.Строки, "Текст");
	Если ТекстыВопросов.Количество() = КоличествоВопросовДерева Тогда
		Возврат;
	КонецЕсли;

	Шаблон = "Количество уникальных текстов не равно количеству вопросов: %1 <> %2";
	СообщениеВПроверку = СтрШаблон(Шаблон, ТекстыВопросов.Количество(), КоличествоВопросовДерева);
	ДобавитьВПроверкуДерева(СообщениеВПроверку);

	НомераДублейТекстов = Новый Массив;
	Для каждого УзелДерева Из ДеревоВопросов.Строки Цикл
		инд = ТекстыВопросов.Найти(УзелДерева.Текст);
		Если Инд = Неопределено Тогда
			НомераДублейТекстов.Добавить(УзелДерева.Номер);
		Иначе
			ТекстыВопросов.Удалить(инд);
		КонецЕсли;
	КонецЦикла;
	ТекстСообщения = Символы.Таб + СокрЛП(СтрСоединить(НомераДублейТекстов, ", "));
	ДобавитьВПроверкуДерева(ТекстСообщения);

КонецПроцедуры

Процедура ПроверитьНаличиеВопросовВСправочнике(ТаблицаТекстов)

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстВопроса_ПроверитьНаличиеВопросовВСправочнике();
	Запрос.УстановитьПараметр("ГруппаПриемник", ГруппаПриемник);
	Запрос.УстановитьПараметр("ТаблицаТекстов", ТаблицаТекстов);
	ТаблицаСсылок = Запрос.Выполнить().Выгрузить();

	КоличествоНайденных = ТаблицаСсылок.Итог("Счетчик");
	ВсеВопросыНайдены = КоличествоВопросовДерева;
	НеНайденоНиОдногоВопроса = КоличествоНайденных = 0;
	НайденаЧастьВопросов = НЕ (ВсеВопросыНайдены ИЛИ НеНайденоНиОдногоВопроса);
	Если НайденаЧастьВопросов Тогда
		ДобавитьВПроверкуДерева("Найдены вопросы, отсутствующие в справочнике:");

		НомераВопросов = Новый Массив;
		Поиск = Новый Структура("Счетчик", 0);
		СтрокиСсылок = ТаблицаСсылок.НайтиСтроки(Поиск);
		Для каждого СтрокаТаблицы Из СтрокиСсылок Цикл
			НомераВопросов.Добавить(СтрокаТаблицы.Номер);
		КонецЦикла;

		НомераВопросовСтрокой = СтрСоединить(НомераВопросов, ", ");
		ДобавитьВПроверкуДерева(Символы.Таб + "- " + СокрЛП(НомераВопросовСтрокой));
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПорядокНумерации(ТаблицаТекстов)

	ТипЧисло = ОписаниеТипа("Число");

	ТаблицаНомеров = ТаблицаТекстов.Скопировать(,"Номер");
	ТаблицаНомеров.Колонки.Добавить("НомерЧислом", ТипЧисло);

	Для каждого СтрокаТаблицы Из ТаблицаНомеров Цикл
		ЧастиСтроки = РазбитьСтроку(СтрокаТаблицы.Номер, ".");
		СтрокаТаблицы.НомерЧислом = ТипЧисло.ПривестиЗначение(ЧастиСтроки.Правая);
	КонецЦикла;

	ТаблицаНомеров.Сортировать("НомерЧислом");
	ТабСверки = ТаблицаНомеров.Скопировать(,"НомерЧислом");
	ТабСверки.Колонки.Добавить("Счетчик", ОписаниеТипа("Число"));
	ТабСверки.ЗаполнитьЗначения(1, "Счетчик");

	ПервыйНомер = ТаблицаНомеров[0].НомерЧислом;
	Для сч=ПервыйНомер По ТаблицаНомеров.Количество() Цикл
		СтрокаСверки = ТабСверки.Добавить();
		СтрокаСверки.НомерЧислом = сч;
		СтрокаСверки.Счетчик = -1;
	КонецЦикла;

	ТабСверки.Свернуть("НомерЧислом", "Счетчик");
	ОбщегоНазначения.УдалитьСтрокиКоллекции(ТабСверки, "Счетчик", 0, Ложь);

	Если НЕ ЗначениеЗаполнено(ТабСверки) Тогда
		Возврат;
	КонецЕсли;

	Сообщения = Новый Соответствие;

	ДобавитьВПроверкуДерева("Обнаружен неверный порядок нумерации:");
	Для каждого СтрокаСверки Из ТабСверки Цикл
		Префикс = ?(СтрокаСверки.Счетчик > 0
			, "Есть в дереве, отсутствует в порядковых номерах"
			, "Есть в порядковых номерах, отсутствует в дереве");

		НомераКВыводу = Сообщения.Получить(Префикс);
		Если НомераКВыводу = Неопределено Тогда
			НомераКВыводу = "";
		КонецЕсли;

		Разделитель = ?(ЗначениеЗаполнено(НомераКВыводу), ", ", "");
		НомераКВыводу = НомераКВыводу + Разделитель + СтрокаСверки.НомерЧислом;
		Сообщения.Вставить(Префикс, НомераКВыводу);
	КонецЦикла;
	Для каждого КлючИЗначение Из Сообщения Цикл
		ТекстСообщения = Символы.Таб + КлючИЗначение.Ключ + ": " + КлючИЗначение.Значение;
		ДобавитьВПроверкуДерева(ТекстСообщения);
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьВПроверкуДерева(Текст)
	Разделитель = ?(ЗначениеЗаполнено(ПроверкаДерева), Символы.ПС, "");
	ПроверкаДерева = ПроверкаДерева + Разделитель + Текст;

КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

&НаСервере
Функция ТекстВопроса_ПроверитьНаличиеВопросовВСправочнике()
	Возврат "ВЫБРАТЬ
	        |	ТаблицаТекстов.Текст КАК Текст,
	        |	ТаблицаТекстов.Номер КАК Номер
	        |ПОМЕСТИТЬ ВТ_ТаблицаТекстов
	        |ИЗ
	        |	&ТаблицаТекстов КАК ТаблицаТекстов
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	Вопросы.Ссылка КАК Ссылка,
	        |	ВТ_ТаблицаТекстов.Текст КАК Текст,
	        |	ВТ_ТаблицаТекстов.Номер КАК Номер,
	        |	ВЫБОР
	        |		КОГДА Вопросы.Ссылка ЕСТЬ NULL
	        |			ТОГДА 0
	        |		ИНАЧЕ 1
	        |	КОНЕЦ КАК Счетчик
	        |ИЗ
	        |	ВТ_ТаблицаТекстов КАК ВТ_ТаблицаТекстов
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Вопросы КАК Вопросы
	        |		ПО (Вопросы.ТекстВопроса = ВТ_ТаблицаТекстов.Текст)
	        |ГДЕ
	        |	Вопросы.Ссылка В ИЕРАРХИИ(&ГруппаПриемник)";

КонецФункции

#КонецОбласти

#КонецОбласти



