#Область ПрограммныйИнтерфейс

Функция ФДата(Дата) Экспорт
	Возврат Формат(Дата, "ДФ=dd.MM.yyyy");

КонецФункции

// Возвращает значение свойства структуры.
//
// Параметры:
//   Структура - Структура, ФиксированнаяСтруктура - Объект, из которого необходимо прочитать значение ключа.
//   Ключ - Строка - Имя свойства структуры, для которого необходимо прочитать значение.
//   ЗначениеПоУмолчанию - Произвольный - Необязательный. Возвращается когда в структуре нет значения по указанному
//                                        ключу.
//       Для скорости рекомендуется передавать только быстро вычисляемые значения (например примитивные типы),
//       а инициализацию более тяжелых значений выполнять после проверки полученного значения (только если это
//       требуется).
//
// Возвращаемое значение:
//   Произвольный - Значение свойства структуры. ЗначениеПоУмолчанию если в структуре нет указанного свойства.
//
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт

	Если Структура = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	Результат = ЗначениеПоУмолчанию;
	Если Структура.Свойство(Ключ, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

КонецФункции

Функция НовыйРезультатПроверки() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибка", Ложь);
	Результат.Вставить("Текст", "");

	Возврат Результат;

КонецФункции

Процедура ДобавитьРезультатПроверки(РезультатПроверкиОбщий, РезультатПроверкиЧастный, Префикс = "", Разделитель = Неопределено) Экспорт

	Если НЕ РезультатПроверкиЧастный.ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;

	Если Разделитель = Неопределено Тогда
		Разделитель = Символы.ПС;

	КонецЕсли;

	РазделительВРезультат = ?(ЗначениеЗаполнено(РезультатПроверкиОбщий.Текст)
		, Разделитель
		, "");

	РезультатПроверкиОбщий.Текст = РезультатПроверкиОбщий.Текст +
		РазделительВРезультат + Префикс + РезультатПроверкиЧастный.Текст;
	РезультатПроверкиОбщий.ЕстьОшибка = Истина;

КонецПроцедуры

// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
//
// Параметры:
//  Объект       - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//  ИмяРеквизита - Строка       - имя реквизита или свойства.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт

	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);

	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;

КонецФункции

// Определяет наличие значения в списке по его свойству
//
// Параметры:
// 	Список - Произвольная коллекция элементов
// 	ИмяПоиска - Строка - имя поискового свойства элемента
// 	ЗначениеПоиска - Произвольный - поисковое значение свойства элемента
// 	ЗначениеСписка - Произвольный - переменная, для помещения найденого элемента
//
// Возвращаемое значение:
// 	Булево - Истина, если в переданной коллекции есть элемент с значением свойства параметра
// 	"ИмяПоиска" равным значению параметра "ЗначениеПоиска"
//
Функция ЕстьЗначениеСписка(Список, ИмяПоиска, ЗначениеПоиска, ЗначениеСписка = Неопределено) Экспорт
	Для каждого Элемент Из Список Цикл
		Если Элемент[ИмяПоиска] = ЗначениеПоиска Тогда
			ЗначениеСписка = Элемент;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

// Создает массив и помещает в него переданное значение.
Функция ЗначениеВМассиве(Значение) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Значение);

	Возврат Массив;

КонецФункции

// Массив значений колонки коллекци
//
//Параметры:
// Коллекция - Произвольный - универсальная коллекция, объект базы, данные формы, массив строк коллекции и т.п.
// ИмяКолонки - Строка
// УдалятьПустые - Булево - в выходном массиве останутся только заполненные значения
// Уникальные - Булево
// Исключения - Массив, Соответствие, Произвольный - элемент, или список элементов которые необходимо исключить
// НаправлениеСортировки - Строка - "Убыв" или "Возр", если задано результирующий массив сортируется
// (см. АванкорКлиентСервер.СортироватьМассив)
//
//Возвращаемое значение:
// Массив
//
Функция ЗначенияКолонкиКоллекции(Коллекция, ИмяКолонки, УдалятьПустые = Ложь,
		Уникальные = Истина, Исключения = Неопределено,
		НаправлениеСортировки = Неопределено) Экспорт

	ИсключатьЗначения = ЗначениеЗаполнено(Исключения);
	Если ИсключатьЗначения Тогда
		ИсключатьИзМассива = ТипЗнч(Исключения) = Тип("Массив");
		ИсключатьИзСоответствия = ТипЗнч(Исключения) = Тип("Соответствие");
	КонецЕсли;

	МассивЗначений = Новый Массив;
	УникальныеЗначения = Новый Соответствие;

	ИспользоватьУникальные = Уникальные;
	Если ИспользоватьУникальные И ИмяКолонки = "Ключ" Тогда
		ТипКоллекции = ТипЗнч(Коллекция);
		ЭтоСоответствиеИлиСтруктура = ТипКоллекции = Тип("Соответствие")
			ИЛИ ТипКоллекции = Тип("Структура");
		Если ЭтоСоответствиеИлиСтруктура Тогда
			ИспользоватьУникальные = Ложь;
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлемКолекции Из Коллекция Цикл
		ЗначениеПоля = ЭлемКолекции[ИмяКолонки];

		Если ИсключатьЗначения Тогда
			Если ИсключатьИзМассива Тогда
				Если Исключения.Найти(ЗначениеПоля) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ИсключатьИзСоответствия Тогда
				Если Исключения.Получить(ЗначениеПоля) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Исключения = ЗначениеПоля Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если УдалятьПустые И НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Продолжить;
		КонецЕсли;

		Если ИспользоватьУникальные
				И УникальныеЗначения.Получить(ЗначениеПоля) = Истина Тогда
			Продолжить;
		КонецЕсли;

		МассивЗначений.Добавить(ЗначениеПоля);
		УникальныеЗначения.Вставить(ЗначениеПоля, Истина);
	КонецЦикла;

	Если ЗначениеЗаполнено(НаправлениеСортировки) Тогда
		МассивЗначений = СортироватьМассив(МассивЗначений, НаправлениеСортировки);
	КонецЕсли;

	Возврат МассивЗначений;

КонецФункции

Функция СортироватьМассив(ЗНАЧ Источник, Направление = "Возр") Экспорт

	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Источник);
	Список.СортироватьПоЗначению(НаправлениеСортировки[Направление]);
	Возврат Список.ВыгрузитьЗначения();

КонецФункции

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения.
//  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт

	Если ТолькоУникальныеЗначения Тогда

		УникальныеЗначения = Новый Соответствие;

		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;

		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;

	Иначе

		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура СообщитьПользователю(Текст) Экспорт

	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();

КонецПроцедуры

// Проверка значения на вхождение в некоторый интервал
//
// Параметры:
//  Значение - Число, Дата - Проверяемое значение
//  НачалоИнтервала - Число, Дата
//  КонецИнтервала - Число, Дата
//  СтрогаяПроверка - Булево
//
// Возвращаемое значение:
//  Булево
//
Функция ЗначениеВИнтервале(Значение, НачалоИнтервала, КонецИнтервала, СтрогаяПроверка = Ложь) Экспорт

    Если СтрогаяПроверка Тогда
        Возврат НачалоИнтервала < Значение И Значение < КонецИнтервала;
    Иначе
        Возврат НачалоИнтервала <= Значение И Значение <= КонецИнтервала;
    КонецЕсли;

КонецФункции

// Описание разницы времени в формате "чч:мм:сс (ВсегоСекунд.ОстатокМиллисекунд сек.)"
//
// Параметры:
//  Старт - Число - результат значения работы функции "ТекущаяУниверсальнаяДатаВМиллисекундах()"
//  Финиш - Число - результат значения работы функции "ТекущаяУниверсальнаяДатаВМиллисекундах()"\
//
// Возвращаемое значение:
//  Строка
//
Функция ОписаниеЗамераВремени(Старт, Финиш) Экспорт
    КолМлСекундЛог = Финиш - Старт;
    КолСекундЛог = ЦЕЛ(КолМлСекундЛог / 1000);
    КолМлСекунд = КолМлСекундЛог - КолСекундЛог;

    ФорматКолМС = "" + КолМлСекунд;
    ФорматКолМС = СтрЗаменить(ФорматКолМС, ",", "");
    ФорматКолМС = СтрЗаменить(ФорматКолМС, " ", "");
    ФорматКолМС = Лев(ФорматКолМС, 3);
    Пока Прав(ФорматКолМС, 1) = "0" Цикл
        ФорматКолМС = Сред(ФорматКолМС, 1, СтрДлина(ФорматКолМС)-1);
    КонецЦикла;
    ФорматСекунд = "" + КолСекундЛог + "." + ФорматКолМС;

   	Результат = ПредставлениеДлительностиВСекундах(КолСекундЛог) + " ("+ ФорматСекунд +" сек.)";
    Возврат Результат;
КонецФункции

Функция ПредставлениеДлительностиВСекундах(КолСекунд) Экспорт
    чч = ЦЕЛ(КолСекунд / 3600);
    мм = ЦЕЛ((КолСекунд - чч * 3600) / 60);
    сс =  КолСекунд - чч * 3600 - мм * 60;
    Результат = Формат(чч, "ЧЦ=2; ЧН=; ЧВН=") + ":" +
                  Формат(мм, "ЧЦ=2; ЧН=; ЧВН=") + ":" +
                  Формат(сс, "ЧЦ=2; ЧН=; ЧВН=");

    Возврат Результат;
КонецФункции

#КонецОбласти
